import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';

import injectSaga from 'utils/injectSaga';
import injectReducer from 'utils/injectReducer';
import AppContainer from 'containers/App-Container';
import { meta } from 'containers/AppHub/meta';

import makeSelect{{ properCase name }} from './selectors';
import reducer from './reducer';
import saga from './saga';
import routes from './routes';

const app = {
  meta: meta.{{ camelCase name }},
  routes,
};

export class {{ properCase name }} extends React.PureComponent {
  render() {
    return (
      <AppContainer app={app} />
    );
  }
}

{{ properCase name }}.propTypes = {
  dispatch: PropTypes.func.isRequired,
};

const mapStateToProps = createStructuredSelector({
  {{ camelCase name }}: makeSelect{{ properCase name }}(),
});

function mapDispatchToProps(dispatch) {
  return {
    dispatch,
  };
}

const withConnect = connect(mapStateToProps, mapDispatchToProps);
const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });
const withSaga = injectSaga({ key: '{{ camelCase name }}', saga });

export default compose(
  withReducer,
  withSaga,
  withConnect,
)({{ properCase name }});
