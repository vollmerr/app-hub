/* eslint-disable redux-saga/yield-effects */
import { put, call, takeLatest } from 'redux-saga/effects';
import { testSaga } from 'redux-saga-test-plan';

import { requestWithToken } from '../../../utils/api';

import * as sagas from '../saga';
import * as selectors from '../selectors';
import * as C from '../constants';
import * as actions from '../actions';

const data = { data: 'test data' };
const error = { message: 'test error' };


describe('{{ camelCase name }}Saga', () => {
  it('should take the latest `GET_INIT_DATA_REQUEST`', () => {
    testSaga(sagas.default).next()
      .all([
          takeLatest(C.GET_INIT_DATA_REQUEST, sagas.getInitData),
      ]).next()
      .finish().isDone();
  });
});


describe('getInitData', () => {
  it('should call the api and update the store with its results', () => {
    testSaga(sagas.getInitData).next()
      .call(requestWithToken, 'PUT URL HERE').next(data)
      .put(actions.initDataSuccess(data)).next()
      .finish().isDone();
  });

  it('should handle errors', () => {
    const errGen = sagas.getInitData();
    errGen.next();
    expect(errGen.throw(error).value).toEqual(put(actions.initDataFailure(error)));
    expect(errGen.next()).toEqual({ done: true, value: undefined });
  });
});
